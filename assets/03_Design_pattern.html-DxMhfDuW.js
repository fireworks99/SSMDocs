import{_ as n,c as s,b as d,a as l,d as e,w as a,r as i,o as h,e as o}from"./app-DPtbEIph.js";const g={},p={class:"table-of-contents"};function u(c,t){const r=i("router-link");return h(),s("div",null,[t[3]||(t[3]=d("h1",{id:"设计模式",tabindex:"-1"},[d("a",{class:"header-anchor",href:"#设计模式"},[d("span",null,"设计模式")])],-1)),d("nav",p,[d("ul",null,[d("li",null,[e(r,{to:"#按目的分为三大类"},{default:a(()=>t[0]||(t[0]=[o("按目的分为三大类")])),_:1})]),d("li",null,[e(r,{to:"#_23种设计模式"},{default:a(()=>t[1]||(t[1]=[o("23种设计模式")])),_:1})]),d("li",null,[e(r,{to:"#记忆小技巧"},{default:a(()=>t[2]||(t[2]=[o("记忆小技巧")])),_:1})])])]),t[4]||(t[4]=l('<h2 id="按目的分为三大类" tabindex="-1"><a class="header-anchor" href="#按目的分为三大类"><span>按目的分为三大类</span></a></h2><table><thead><tr><th>分类</th><th>中文名</th><th>描述</th></tr></thead><tbody><tr><td><strong>创建型（Creational）</strong></td><td>创建对象的模式</td><td>主要关注对象的创建过程，封装了对象的实例化过程，使其与使用方式分离。</td></tr><tr><td><strong>结构型（Structural）</strong></td><td>组装类或对象的模式</td><td>关注类和对象的组合方式，用来创建更大结构的灵活解决方案。</td></tr><tr><td><strong>行为型（Behavioral）</strong></td><td>对象间通信和职责分配的模式</td><td>关注对象之间的通信、职责划分、算法封装等行为层面的实现。</td></tr></tbody></table><h2 id="_23种设计模式" tabindex="-1"><a class="header-anchor" href="#_23种设计模式"><span>23种设计模式</span></a></h2><table><thead><tr><th>分类</th><th>模式名称（中文）</th><th>模式名称（英文）</th></tr></thead><tbody><tr><td><strong>创建型</strong></td><td>单例模式</td><td>Singleton</td></tr><tr><td></td><td>工厂方法模式</td><td>Factory Method</td></tr><tr><td></td><td>抽象工厂模式</td><td>Abstract Factory</td></tr><tr><td></td><td>建造者模式</td><td>Builder</td></tr><tr><td></td><td>原型模式</td><td>Prototype</td></tr><tr><td><strong>结构型</strong></td><td>适配器模式</td><td>Adapter</td></tr><tr><td></td><td>装饰器模式</td><td>Decorator</td></tr><tr><td></td><td>代理模式</td><td>Proxy</td></tr><tr><td></td><td>外观模式</td><td>Facade</td></tr><tr><td></td><td>桥接模式</td><td>Bridge</td></tr><tr><td></td><td>组合模式</td><td>Composite</td></tr><tr><td></td><td>享元模式</td><td>Flyweight</td></tr><tr><td><strong>行为型</strong></td><td>观察者模式</td><td>Observer</td></tr><tr><td></td><td>策略模式</td><td>Strategy</td></tr><tr><td></td><td>状态模式</td><td>State</td></tr><tr><td></td><td>责任链模式</td><td>Chain of Responsibility</td></tr><tr><td></td><td>命令模式</td><td>Command</td></tr><tr><td></td><td>模板方法模式</td><td>Template Method</td></tr><tr><td></td><td>访问者模式</td><td>Visitor</td></tr><tr><td></td><td>解释器模式</td><td>Interpreter</td></tr><tr><td></td><td>备忘录模式</td><td>Memento</td></tr><tr><td></td><td>中介者模式</td><td>Mediator</td></tr><tr><td></td><td>迭代器模式</td><td>Iterator</td></tr></tbody></table><h2 id="记忆小技巧" tabindex="-1"><a class="header-anchor" href="#记忆小技巧"><span>记忆小技巧</span></a></h2><ul><li><strong>创建型</strong> 关注“怎么创建对象”，像“造房子”：工厂、建造者、原型。</li><li><strong>结构型</strong> 关注“怎么组合结构”，像“装修”：装饰器、桥接、外观。</li><li><strong>行为型</strong> 关注“怎么协作交互”，像“管理”：策略、命令、观察者等。</li></ul><p>了解更多信息，可查阅<a href="https://www.runoob.com/design-pattern/design-pattern-intro.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a>。</p>',7))])}const m=n(g,[["render",u]]),b=JSON.parse('{"path":"/post/03_Design_pattern.html","title":"设计模式简介","lang":"zh-CN","frontmatter":{"title":"设计模式简介","lang":"zh-CN","author":"fireworks99","date":"2025-04-16"},"headers":[{"level":2,"title":"按目的分为三大类","slug":"按目的分为三大类","link":"#按目的分为三大类","children":[]},{"level":2,"title":"23种设计模式","slug":"_23种设计模式","link":"#_23种设计模式","children":[]},{"level":2,"title":"记忆小技巧","slug":"记忆小技巧","link":"#记忆小技巧","children":[]}],"git":{"updatedTime":1744965496000,"contributors":[{"name":"fireworks99","username":"fireworks99","email":"46671672+fireworks99@users.noreply.github.com","commits":2,"url":"https://github.com/fireworks99"}],"changelog":[{"hash":"2222baa47c74da8e8ac44ac0600f4fd1e6d0d7ec","time":1744965496000,"email":"46671672+fireworks99@users.noreply.github.com","author":"fireworks99","message":"update factory"},{"hash":"b10fedcbed3d21dea7d8373ae8334ddfd4fef45b","time":1744794681000,"email":"46671672+fireworks99@users.noreply.github.com","author":"fireworks99","message":"design pattern"}]},"filePathRelative":"post/03_Design_pattern.md"}');export{m as comp,b as data};
